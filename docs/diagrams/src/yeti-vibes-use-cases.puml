@startuml yeti_vibes_use_case_diagram
title "Yeti-Vibes Use Cases"

' Layout settings
skinparam actorStyle awesome
skinparam handwritten true
left to right direction

' Actor definitions
actor :Event Organizer: as Client <<Person>>
actor :User Interface: as UI <<UI Application>>
actor :Payment Provider: as PaymentProvider <<External Service>>

' Client interaction use cases
'rectangle Client_Interactions {
    usecase OpenAccount as "Open an Account" <<user-interaction>>
    usecase Login as "Login to Account" <<user-interaction>>
    usecase ValidateSubscription as "Validate Subscription" <<user-interaction>>
    usecase ConfigureCamera as "Provide camera \nfeed details" <<user-interaction>>
    usecase ConfigureFrame as "Configure Zones on Frame" <<user-interaction>>
    usecase CreateEvent as "Create an event" <<user-interaction>>
    usecase ShowSubscriptions as "Show Subscription Models" <<user-interaction>>
    usecase MakePayment as "Make Payment for the subscription" <<user-interaction>>
    usecase FetchReactions as "Fetch Reactions" <<service-endpoint>>
    usecase ShowReactions as "Show reaction data" <<user-interaction>>
    usecase DownloadReactions as "Download reactions offline" <<user-interaction>>
    usecase ShowInsights as "Show Insights" <<user-interaction>>
    usecase CloseAccount as "Close the account" <<user-interaction>>
    usecase RefundPayment as "Refund the payment" <<user-interaction>>
    usecase StartEvent as "Start the event" <<user-interaction>>
'}


' System process use cases
'rectangle System_Interactions {
    usecase LoadConfiguration as "Load feed configuration" <<system-process>>
    usecase ProcessFeed as "Process the \nfeed  real-time" <<system-process>>
    usecase IdentifyPerson as "Detect and identify the person" <<system-process>>
    usecase CaptureReaction as "Capture the reaction " <<system-process>>
    usecase ValidateReaction as "Validate the reaction" <<system-process>>
    usecase SaveReaction as "Save the reaction" <<system-process>>
    usecase GenerateInsights as "Generate insights \non reactions" <<system-process>>
    usecase HandlePayment as "Handle the payment" <<system-process>>
'}

' Client interactions
Client --> UI : Uses
UI --> OpenAccount : Does
UI --> Login : Does
Login --> ValidateSubscription : Uses
UI --> ConfigureCamera : Does
UI --> ConfigureFrame : Does
UI --> CreateEvent : Does
UI --> ShowSubscriptions : Does
UI --> MakePayment : Does
MakePayment --> ShowSubscriptions : Uses
MakePayment --> HandlePayment : Calls
UI --> StartEvent : Does
UI --> ShowReactions : Does
UI --> DownloadReactions : Does
ShowReactions --> FetchReactions : Calls
DownloadReactions --> FetchReactions : Calls
UI --> ShowInsights : Does
ShowInsights --> GenerateInsights : Calls
UI --> CloseAccount : Does
CloseAccount --> RefundPayment : Triggers
RefundPayment --> HandlePayment : Calls


' System interactions
StartEvent --> LoadConfiguration : Triggers
StartEvent --> ProcessFeed : Triggers
ProcessFeed --> IdentifyPerson : Triggers
ProcessFeed --> CaptureReaction : Triggers
CaptureReaction --> ValidateReaction : Runs
CaptureReaction --> SaveReaction : Runs after validation
HandlePayment --> PaymentProvider : use

@enduml