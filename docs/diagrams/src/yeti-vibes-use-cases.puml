@startuml yeti_vibes_use_case_diagram
title "Yeti-Vibes Use Cases"

' Layout settings
skinparam actorStyle awesome
skinparam handwritten true
left to right direction

' Actor definitions
actor :Event Organizer: as Client <<Person>>
actor :Payment Provider: as PaymentProvider <<External Service>>

' Client interaction use cases
'rectangle Client_Interactions {
    usecase OpenAccount as "Open an Account" <<use-interaction>>
    usecase Login as "Login to Account" <<use-interaction>>
    usecase ValidateSubscription as "Validate Subscription" <<use-interaction>>
    usecase ConfigureCamera as "Provide camera \nfeed details" <<use-interaction>>
    usecase ConfigureFrame as "Configure Zones on Frame" <<use-interaction>>
    usecase CreateEvent as "Create an event" <<use-interaction>>
    usecase ChooseSubscription as "Choose Subscription Model" <<use-interaction>>
    usecase MakePayment as "Make Payment for the subscription" <<use-interaction>>
    usecase ViewReactions as "View reaction data" <<use-interaction>>
    usecase DownloadReactions as "Download reactions offline" <<use-interaction>>
    usecase ViewInsights as "View Insights" <<use-interaction>>
    usecase CloseAccount as "Close the account" <<use-interaction>>
    usecase RefundPayment as "Refund the payment" <<use-interaction>>
    usecase StartEvent as "Start gathering reactions \nfrom the event" <<use-interaction>>
'}


' System process use cases
'rectangle System_Interactions {
    usecase LoadConfiguration as "Load feed configuration" <<system-process>>
    usecase ProcessFeed as "Process the \nfeed  real-time" <<system-process>>
    usecase IdentifyPerson as "Detect and identify the person" <<system-process>>
    usecase CaptureReaction as "Capture the reaction " <<system-process>>
    usecase ValidateReaction as "Validate the reaction" <<system-process>>
    usecase SaveReaction as "Saves the reaction" <<system-process>>
    usecase GenerateInsights as "Generate insights \non reactions" <<system-process>>
    usecase HandlePayment as "Handle the payment" <<system-process>>
'}

' Client interactions
Client --> OpenAccount : Does
Client --> Login : Does
Login --> ValidateSubscription : Uses
Client --> ConfigureCamera : Does
Client --> ConfigureFrame : Does
Client --> CreateEvent : Does
Client --> ChooseSubscription : Does
Client --> MakePayment : Does
MakePayment --> ChooseSubscription : Uses
MakePayment --> HandlePayment : Calls
Client --> StartEvent : Does
Client --> ViewReactions : Does
Client --> DownloadReactions : Does
Client --> ViewInsights : Does
ViewInsights --> GenerateInsights : Calls
Client --> CloseAccount : Does
CloseAccount --> RefundPayment : Triggers
RefundPayment --> HandlePayment : Calls


' System interactions
StartEvent --> LoadConfiguration : Triggers
StartEvent --> ProcessFeed : Triggers
ProcessFeed --> IdentifyPerson : Triggers
ProcessFeed --> CaptureReaction : Triggers
CaptureReaction --> ValidateReaction : Runs
CaptureReaction --> SaveReaction : Runs after validation
HandlePayment --> PaymentProvider : use

@enduml